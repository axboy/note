1、Java考古学
	Sun -> Stanford University Network -> 斯坦福大学校园网
	
2、Java创世纪
	-- Java环境变量配置
	JAVA_HOME 	-> C:\Program Files\Java\jdk1.7.0_15
	PATH 		-> %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;
	CLASSPATH 	-> .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar
	测试：java -version
	
3、Java基本概念
	jre -> Java Runtime Environment
	包括：Java虚拟机，Java平台核心类文件，其它支持文件
	
4、Java的变量
	--数据类型
	a.基本数据类型
	b.引用数据类型
	
	--变量的命名规范
	a.变量名以“字母、下划线、美元符”开头
	b.后面跟“字母、下划线、美元符或者数字”
	c.Java变量名没有长度限制
	d.Java变量名对大小写敏感
	
	--驼峰命名法
	a.变量名应该用有意义的英文单词
	b.变量名如果只有一个单词，则所有字母小写
	c.变量名如果由多个英文单词组成，则从第二个单词开始首字母大写
	
5、Java的基本数据类型
	a.boolean类型，只有两种取值，true和false。（不能用0和非0）
	b.字符型变量，char。
		-- ASCII -> American Standard Code for Information Interchange
		a.计算机中，所有数据都需要使用二进制数字表示
		b.类似于a.b.c之类的字母无法直接用二进制表示
		c.所以就将所有常见的符号进行编号。标准ASCII码使用8位2进制数来表示字符
		-- Unicode字符集
		Unicode为每种语言的每个字符设定了统一并且唯一的二进制码
		a.Unicode满足了跨语言文本转换和处理的需求
		b.Unicode在互联网当中扮演着非常重要的角色
		c.Unicode使用0~0x10FFFF来表示字符
		d.最多允许1114112个字符
		PS：Unicode编码，一个中文字符和一个英文字符所占空间一样
			eg：char c = '中' ;
	c.数值型变量
	-- 整型
		byte		1字节
		short		2字节
		int			4字节
		long		8字节
		a.八进制以0开头，十六进制以0x或0X开头
		b.声明long型变量要后加l或L
			eg：long l = 123L ;
	-- 浮点型
		float		4字节		-3.403E38 ~ 3.403E38
		double		8字节		-1.798E308 ~ 1.798E308
	
6、练习课1
	-- 整数默认int，小数默认double	
	eg：float f = 1.1 ;
		float f = 1.1f;
	-- short、byte类型例外，在不超范围的情况下可以直接将数字赋值
	eg：byte b = 1 ;（正确）
		byte b = 200 ; （警告）

7、运算符与表达式
	-- 运算符
	&	逻辑与		&&短路与
	|	逻辑或		||短路或
	-- 表达式
	表达式是符合一定语法规则的运算符和操作符的序列
	表达式的值：对表达式中操作数进行运算得到的结果称为表达式的值
	表达式的类型：表达式的值的数据类型即为表达式的类型
	
8、分支语句
	a.程序运行流程分类
		顺序结构
		分支结构
		循环结构
	b.if...else...分支结构
		if(布尔类型表达式){}
	c.switch分支结构
		switch(表达式){}
		表达式只能是byte、short、int、char类型
		
9、练习课2
	-- 练习if...else...
	无需记录
	
10、循环语句
	--for循环
	--while循环
	
11、练习课3
	无需记录
	
12、面向对象基础1
	-- 什么是面向对象思维方法
	a.首先确定谁来做，其次确定怎么做
	b.首先考虑整体，其次考虑局部
	c.首先考虑抽象，其次考虑具体
	
13、面向对象基础2
	-- 堆内存存放对象的本体
	-- 栈内存存放对象的引用（名字）
	eg：
		Dog d;		//创建一个Dog的引用
		new Dog();	//创建一个Dog的对象
		Dog d = new Dog();	//将创建Dog对象赋给这个引用
		
14、面向对象基础3
	-- 匿名对象的使用
		eg：new Dog().jump();
		
15、面向对象基础4
	-- 函数的重载
	-- 构造函数的作用
	
16、this的使用方法
	-- 使用this调用成员变量和成员函数
	-- 使用this调用构造函数
	
17、static关键字的作用
	--静态成员变量的语法特点
	a.可以直接用类名调用，非必需
	
	--静态函数
	a.可以用类名直接调用
	b.在静态函数中不能直接使用非静态成员变量
	c.静态函数中不能使用this
	
	--静态代码块
	a.静态代码块在装载类的时候执行
	b.主要作用，为静态变量赋初值
	c.静态代码块使用较少，了解即可

18、继承初步
	无需记录
	
19、子类实例化过程
	--生成子类的过程
	a.在子类的构造函数中，必需调用父类的构造函数
	b.如果子类的构造函数未明确调用父类构造函数，默认会加入super(...);
	
	--使用super调用父类构造函数的方法
	a.使用super调用父类构造函数，super必需在子类的构造函数第一行
	
20、函数的复写
	--函数的复写（override）
	a.在具有父子关系的两个类当中
	b.父类和子类各有一个函数，这两个函数的定义完全相同
	--使用super调用父类的成员函数
	
21、对象的转型
	--对象的向上转型
	定义：将子类的对象赋值给父类的引用
		eg：Student s = new Student();
			Person p = s;
	a.一个引用能够调用哪些成员（变量或函数），取决于这个引用的类型
	b.一个引用调用的是哪一个方法，取决于这个引用所指向的对象
	--对象的向下转型
	定义：将父类的对象赋值给子类的引用
		eg：Student s1 = new Student();
			Person p = s1;
			Student s2 = (Student)p;
			//下面的不对，向下转型的前提是要先向上转型
			person p = new Person();
			Student s = (Student)p;

22、面向对象应用
	--应对客户需求变更
	
23、抽象类和抽象函数
	--抽象函数的语法特征
	抽象函数定义：只有函数定义，没有函数体的函数
		eg：abstract void func();
		
	--抽象类的语法特征
	抽象类定义：使用abstract定义的类称为抽象类
	a.抽象类不能生成对象
	b.如果一个类中包含有抽象函数，那么这个类必需被声明为抽象类
	c.如果一个类中没有包含抽象函数和，这个类也可以被声明为抽象类
	d.抽象类可以有构造函数
	
	--抽象类的作用
	
24、为什么用抽象类
	a.如果一段代码在语意上有错误的，那么在语法上也应该是有错误的
	
25、包和访问权限1
	--什么是Java中的软件包？
		软件包为Java类提供了命名空间
	--为什么要使用软件包？
	--如何给一个类打包？
	a.	eg：Javac -d . Test.java
		-d -> 根据包名生成文件夹
		.  -> 生成文件夹位置，点表示当前目录
	b.一个类的全名应该是“包名”+“.”+“类名”
	c.包名的命名规范
		1.要求包名所有的字母都要小写
		2.包名一般情况下，是你的域名倒过来写

26、包和访问权限2
	-- public：公共权限
		a.如果一个类被声明为public权限，那么这个类的类名和文件名必需相同
	-- private：私有权限
		a.private能修饰变量、函数和内部类
		b.只能在当前类中被访问
	-- default：默认权限，包级别访问权限
		a.默认权限，不需要写default
		b.同一个包内具有访问权限
	-- protected：受保护权限

27、包和访问权限3
	-- 访问权限与继承
	a.如果子类和父类不在同一个包中，子类可以继承到父类中的default权限
	的成员变量和函数，但是由于由于权限不够，无法使用
	b.如果子类和父类即使在同一个包中，子类可以继承到父类中的private权限
	的成员变量和函数，但是由于由于权限不够，无法使用
	c.protected权限拥有和default一样的权限，但是该权限只能修饰成员变量和函数，
	不能修饰类，即在所在包的外部，只有本类的子类才能访问
	-- protected权限

28、接口的基本语法
	-- 什么是接口
	a.定义了接口，就定义了标准
	-- 接口的基本语法
	a.使用interface定义
	b.接口中的方法都是抽象方法
	c.接口中的方法都是public权限
	d.实现（implements）是特殊的继承（extends）
	e.实现接口使用implements关键字
	f.一个类可以实现多个接口
	g.一个接口可以继承多个接口

29、接口的应用
	-- 为什么要使用接口？
	-- 工厂方法模式

30、Java中的异常1
	--什么是异常
		定义：中断了正常指令流的事件
	--异常的分类
	check exception & uncheck exception
	--try...catch...finally结构的使用方法
		finally里的代码，无论出不出异常，finally的代码都执行，一般放一些释放资源的代码
	
31、Java中的异常2
	--throw的作用
	--throws的作用
	eg：public void setName(String name) throws Exception{};
		谁调用谁处理
	
32、Java中的IO 1
	--I/O操作的目标
		数据源：文件、键盘、网络等
		目的地：文件、屏幕、网络等
		输入：数据进入到程序
		输出：由程序数据输出
	--IO的分类方法
		a.输入流	输出流
		b.字节流	字符流
		c.节点流	处理流
		d.InputStream OutputStream是所有字节流的父类，是抽象类
	--读取文件和写入文件的方法

33、Java中的IO 2
	--字节流和字符流对比
	
34、Java中的IO 3
	--处理流的使用实例
	--“装饰者（Decorator）”模式
	--节点流与处理流的关系

35、内部类和匿名内部类
	--什么是内部类
	--内部类的使用方法
	--匿名内部类的使用方法

36、Java中的线程1
	--进程和线程
	多进程：在操作系统中能（同时）运行多个任务（程序）
	多线程：在同一个应用程序中有多个顺序（同时）执行
	--多线程程序运行模式
	--定义线程的方法

37、Java中的线程2
	--实现线程的第二种方法
	a.实现Runnable接口
	--控制线程的常用函数
		中断线程：
		(a)Thread.sleep();	//阻塞线程
		(b).Thread.yield();	//让出cpu，重新抢cpu执行权，cpu执行哪个线程不一定
		设置线程的优先级
		(a)getPriority();
		(b)setPriority();
		(c)线程优先级，最大是10，最小是1，可以使用Thread类所提供的静态常量来设置线程优先级
		(d)优先级越高的线程，被执行的概率更高
		
38、Java中的线程3
	--多线程数据安全
	a.使用同步代码块，synchronized(){}
	--同步线程的方法

39、深入同步语法
	--深入synchronized关键字

40、Java中的数组
	--数组的类型
	--数组的定义方法
	--数组的操作方法

41、类级框架1
	--什么是类级框架
	a.类级框架是一组类和接口
	b.位于java.util包中
	c.主要用于存储和管理对象
	d.主要分为三大类：集合、列表和映射	
	--集合的种类
	集合(Set)：集合中的对象不按特定的方式排序，并且没有重复对象
	列表(List)：集合中对象按照索引位置排序，可以有重复的对象
	映射(Map)：集合中的每一个元素包含一个键对象和一个值对象，键不可以重复，值可以重复
	--类级框架的基础结构

42、类级框架2
	--Collection和Iterator接口
	--Set与HashSet的使用方法

43、类级框架3
	--Map与HashMap的使用方法
	--JDK帮助文档的使用方法


java容器作用：提供统一的。。。安全机制




都是以前看视频的时候记的，当时不会markdown，暂不转格式了


